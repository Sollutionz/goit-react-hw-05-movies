{"version":3,"file":"static/js/23.d6bcab62.chunk.js","mappings":"6PAIe,SAASA,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,OAZAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,8GAEAC,EAAAA,EAAAA,IAAiBJ,GAFjB,OAEbK,EAFa,OAGnBN,EAAWM,GAHQ,uGAAH,qDAQpBF,GACD,GAAE,CAACH,KAGF,8BACsB,IAAnBF,EAAQQ,QACP,6DAEA,wBACGR,EAAQS,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,2BACE,4BACE,sCACCD,MAEH,uBAAIC,MALGF,EAQZ,OAKV,C,sLCrCKG,E,OAAWC,EAAAA,OAAa,CAC5BC,QAHc,+BAIdC,OAAQ,CACNC,QAAS,sCAIAC,EAAmB,mCAAG,4FACd,QACC,MAFa,SAGVL,EAASM,IAAT,oBAFJ,QAEI,YADH,QAFa,cAG3BC,EAH2B,OAIzBb,EAASa,EAATb,KAJyB,kBAK1BA,EAAKc,SALqB,2CAAH,qDAQnBC,EAAe,mCAAG,WAAMZ,GAAN,yFACNG,EAASM,IAAT,gBAAsBT,IADhB,cACvBU,EADuB,OAErBb,EAASa,EAATb,KAFqB,kBAGtBA,GAHsB,2CAAH,sDAMfD,EAAgB,mCAAG,WAAMI,GAAN,yFACPG,EAASM,IAAT,gBAAsBT,EAAtB,aADO,cACxBU,EADwB,OAEtBb,EAASa,EAATb,KAFsB,kBAGvBA,EAAKc,SAHkB,2CAAH,sDAMhBE,EAAc,mCAAG,WAAMb,GAAN,yFACLG,EAASM,IAAT,gBAAsBT,EAAtB,aADK,cACtBU,EADsB,OAEpBb,EAASa,EAATb,KAFoB,kBAGrBA,EAAKiB,MAHgB,2CAAH,sDAMdC,EAAkB,mCAAG,WAAMC,GAAN,yFACTb,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CAAEU,MAAAA,KAFoB,cAC1BN,EAD0B,OAIxBb,EAASa,EAATb,KAJwB,kBAKzBA,EAAKc,SALoB,2CAAH,qD","sources":["components/reviews/Reviews.jsx","services/MoviesAPI.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReview } from 'services/MoviesAPI';\n\nexport default function Reviews (){\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovieReview = async () => {\n      try {\n        const data = await fetchMovieReview(movieId);\n        setReviews(data);\n      } catch (error) {\n        // alert(`Oops, some error occurred... Message: ${error.message}`);\n      }\n    };\n    getMovieReview();\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length === 0 ? (\n        <p>Sorry there are still no reviews</p>\n      ) : (\n        <ul>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <div>\n                  <span>Author:</span>\n                  {author}\n                </div>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n","import axios from 'axios';\n\nconst API_URL = 'https://api.themoviedb.org/3';\n\nconst MovieAPI = axios.create({\n  baseURL: API_URL,\n  params: {\n    api_key: 'fc6e97341dc9ad67e721468f18ba1521',\n  },\n});\n\nexport const fetchTrandingMovies = async () => {\n  const media_type = 'movie';\n  const time_window = 'day';\n  const response = await MovieAPI.get(`/trending/${media_type}/${time_window}`);\n  const { data } = response;\n  return data.results;\n};\n\nexport const fetchMoviesById = async id => {\n  const response = await MovieAPI.get(`movie/${id}`);\n  const { data } = response;\n  return data;\n};\n\nexport const fetchMovieReview = async id => {\n  const response = await MovieAPI.get(`movie/${id}/reviews`);\n  const { data } = response;\n  return data.results;\n};\n\nexport const fetchMovieCast = async id => {\n  const response = await MovieAPI.get(`movie/${id}/credits`);\n  const { data } = response;\n  return data.cast;\n};\n\nexport const fetchMovieBySearch = async query => {\n  const response = await MovieAPI.get('/search/movie', {\n    params: { query },\n  });\n  const { data } = response;        \n  return data.results;\n};\n"],"names":["Reviews","useState","reviews","setReviews","movieId","useParams","useEffect","getMovieReview","fetchMovieReview","data","length","map","id","author","content","MovieAPI","axios","baseURL","params","api_key","fetchTrandingMovies","get","response","results","fetchMoviesById","fetchMovieCast","cast","fetchMovieBySearch","query"],"sourceRoot":""}